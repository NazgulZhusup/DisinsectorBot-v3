# app/shared_functions.py

from app.model import Disinsector
from database import db
from datetime import datetime
from app.utils import send_telegram_message
import logging

logger = logging.getLogger('shared_functions')


def get_next_disinsector():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–æ–≤
        available_disinsectors = Disinsector.query.filter(
            Disinsector.token.isnot(None),
            Disinsector.telegram_user_id.isnot(None),
            Disinsector.load < Disinsector.max_load
        ).order_by(Disinsector.last_assigned).all()

        if not available_disinsectors:
            logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–æ–≤.")
            return None

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–∞
        next_disinsector = available_disinsectors[0]
        next_disinsector.last_assigned = datetime.utcnow()  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
        db.session.commit()

        logger.info(f"–í—ã–±—Ä–∞–Ω –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä —Å ID: {next_disinsector.id}")
        return next_disinsector
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–∞: {e}")
        db.session.rollback()
        return None


async def send_notification_to_disinsector_and_start_questions(disinsector, order):
    try:
        message = (
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{order.id}.\n"
            f"–ê–¥—Ä–µ—Å: {order.client.address}\n"
            f"–û–±—ä–µ–∫—Ç: {order.object_type}\n"
            "–°–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É?"
        )
        send_telegram_message(disinsector.token, disinsector.telegram_user_id, message)
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä—É {disinsector.name}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")