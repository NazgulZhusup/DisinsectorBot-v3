# api.py

from datetime import datetime
from flask import Blueprint, request, jsonify
from sqlalchemy import asc
from app.model import Order, Disinsector, Client
from app.shared_functions import get_next_disinsector, send_notification_to_disinsector_and_start_questions
from database import db
from app.utils import send_telegram_message
import logging


api_bp = Blueprint('api', __name__)
logger = logging.getLogger('api_bp')


def assign_order_to_disinsector(order):
    try:
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–æ–≤ —Å —Ç–æ–∫–µ–Ω–æ–º, telegram_user_id –∏ –Ω–∞–≥—Ä—É–∑–∫–æ–π –º–µ–Ω—å—à–µ max_load
        available_disinsectors = Disinsector.query.filter(
            Disinsector.token.isnot(None),
            Disinsector.telegram_user_id.isnot(None),
            Disinsector.load < Disinsector.max_load
        ).order_by(Disinsector.last_assigned).all()

        if not available_disinsectors:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–æ–≤
            logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.")
            return None

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
        disinsector = available_disinsectors[0]

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞—è–≤–∫—É –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä—É
        order.disinsector_id = disinsector.id
        disinsector.last_assigned = datetime.utcnow()
        disinsector.load += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–∞
        db.session.commit()

        # –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        logger.info(f"–ó–∞—è–≤–∫–∞ {order.id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä—É {disinsector.name} (ID: {disinsector.id})")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä—É
        message = f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{order.id}. –ê–¥—Ä–µ—Å: {order.client.address}"
        send_telegram_message(disinsector.token, disinsector.telegram_user_id, message)

        return disinsector
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä—É: {e}")
        db.session.rollback()  # –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return None


@api_bp.route('/create_order', methods=['POST'])
def create_order():
    data = request.get_json()
    if not data:
        return jsonify({'error': 'No data provided'}), 400

    required_fields = ['client_name', 'phone_number', 'address', 'object_type', 'insect_quantity']
    missing_fields = [field for field in required_fields if field not in data]
    if missing_fields:
        return jsonify({'error': f'Missing fields: {", ".join(missing_fields)}'}), 400

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    client = Client.query.filter_by(phone=data['phone_number']).first()
    if not client:
        client = Client(name=data['client_name'], phone=data['phone_number'], address=data['address'])
        db.session.add(client)
        db.session.commit()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    new_order = Order(
        client_id=client.id,
        object_type=data['object_type'],
        insect_quantity=data['insect_quantity'],
        disinsect_experience=data.get('disinsect_experience', False),
        order_status='–ù–æ–≤–∞—è'
    )
    db.session.add(new_order)
    db.session.commit()

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    assigned_disinsector = get_next_disinsector()
    if assigned_disinsector:
        new_order.disinsector_id = assigned_disinsector.id
        db.session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä—É
        send_notification_to_disinsector_and_start_questions(assigned_disinsector, new_order)
        logger.info(f"–ó–∞—è–≤–∫–∞ {new_order.id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä—É {assigned_disinsector.name}")
    else:
        logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–∑–∏–Ω—Å–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.")
        return jsonify({'error': 'No available disinsector'}), 400

    return jsonify({'message': 'Order created successfully', 'order_id': new_order.id}), 200